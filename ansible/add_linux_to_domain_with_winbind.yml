# Adding Linux machines to Active Directory

- hosts: linux-winbind
  remote_user: root
  become: yes

  tasks:

  ###### DNS

  # Installed for nslookup tests on system; not required for setup
  - name: Install the latest version of bind-utils
    package:
      name: bind-utils
      state: latest

  - name: Configure domain controller as DNS server
    template:
        src: resolv.conf.j2
        dest: /etc/resolv.conf

  - name: Configure /etc/hosts
    template:
        src: hosts.j2
        dest: /etc/hosts

  - set_fact:
      host_fqdn: '{{ inventory_hostname }}.{{ AD_DOMAIN_NAME }}'

  - name: Ensure FQDN is correctly set up
    command: hostname -f
    register: hostname_result
    changed_when: False
    failed_when: hostname_result.stdout != host_fqdn

  ##### Kerberos
  - name: Instantiante krb5.conf file and copy to target
    template:
      src: krb5.conf.j2
      dest: /etc/krb5.conf

  - name: Install the latest version of krb5-libs
    package:
      name: krb5-libs
      state: latest

  - name: Install the latest version of krb5-workstation
    package:
      name: krb5-workstation
      state: latest

  ##### NTP
  - name: Install the latest version of ntp
    package:
      name: ntp
      state: latest

  - name: Configure domain controller as NTP server
    template:
      src: ntp.conf.j2
      dest: /etc/ntp.conf
    register: ntp_config_result

  - name: Run ntp service
    when: ntp_config_result.changed
    service:
      name: ntpd
      state: restarted

  ##### Samba
  - name: Install Samba
    package:
      name: samba
      state: latest

  - name: Find Samba config file location
    shell: /usr/sbin/smbd -b | grep CONFIGFILE
    register: smbd_conf_file_result
    changed_when: False

  - set_fact:
      smbd_conf_file: '{{ smbd_conf_file_result.stdout | regex_replace("^\s*CONFIGFILE:\s*(\S*)\s*.*$", "\1") }}'

  # need two set_facts because the first one is not yet visible otherwise
  - set_fact:
      smbd_map_file: '{{ smbd_conf_file | dirname }}/user.map'

  - name: Configure user map
    template:
      src: user.map.j2
      dest: '{{ smbd_map_file }}'

  - name: Configure Samba
    template:
      src: smb.conf.j2
      dest: '{{ smbd_conf_file }}'
    register: samba_config_result

  - name: Restart Samba
    when: samba_config_result.changed
    service:
      name: smb
      state: restarted

  # This query is only allowed if the machine is in the domain.
  # Failure means the domain join must be done.
  - name: Test existing domain membership
    command: net ads dn 'DC={{ AD_WORKGROUP_NAME }},DC={{ AD_TLD }}' -P
    changed_when: False
    ignore_errors: yes
    register: domain_query_result

  - name: Join domain
    when: domain_query_result.failed
    command: net ads join -U '{{ LINUX_USERNAME }}%{{ LINUX_PASSWORD }}'

  ###### winbind

  - name: Configure passwords in Name Service Switch to use winbind
    lineinfile:
      path: /etc/nsswitch.conf
      regexp: '^passwd'
      line: 'passwd: files winbind'

  - name: Configure groups in Name Service Switch to use winbind
    lineinfile:
      path: /etc/nsswitch.conf
      regexp: '^group'
      line: 'group:  files winbind'

  - name: Install the latest version of winbind
    package:
      name: samba-winbind
      state: latest

  - name: Install the latest version of winbind-clients
    package:
      name: samba-winbind-clients
      state: latest

  - name: Start windbind
    service:
      name: winbind
      state: started

  - name: Verify connection to AD users and groups
    command: getent group standard_users
    changed_when: False

  - name: Enable PAM to use windbind
    command: authconfig --enablewinbindauth --update

  ##### activate auto-creation of home directories
  - name: Ensure that Bob's home directory does not exist
    file:
      path: /home/bob
      state: absent

  - name: Check if auto-creation of home directory is enabled
    shell: authconfig --test | grep mkhomedir
    register: authconfig_mkhomedir_result
    changed_when: False

  - name: Enable auto-creation of home directory
    when: "'disabled' in authconfig_mkhomedir_result.stdout"
    command: authconfig --enablemkhomedir --update

  - name: Log in as Bob
    shell: su --login bob
    args:
      warn: no
    changed_when: False

  - name: Ensure that Bob's home directory does exist
    stat:
      path: /home/bob
    register: stat_result

  - assert: { that: stat_result.stat.exists }
